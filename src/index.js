export {
    isCompilerError,
    makeErrorCollector,
    makeReferenceError,
    makeSyntaxError,
    makeTypeError
} from "./errors/index.js"
export { translateImportPaths } from "./formatters/index.js"
export { readHeader } from "./readers/index.js"
export {
    anySymbol,
    anyWord,
    boollit,
    byteslit,
    group,
    intlit,
    isDummySite,
    makeBoolLiteral,
    makeByteArrayLiteral,
    makeComment,
    makeDummySite,
    makeGroup,
    makeHeliosSource,
    makeIntLiteral,
    makeNL,
    makeRealLiteral,
    makeSource,
    makeStringLiteral,
    makeSymbolToken,
    makeTokenizer,
    makeTokenReader,
    makeTokenSite,
    makeWord,
    mergeSites,
    oneOf,
    reallit,
    strlit,
    symbol,
    wildcard,
    word,
    REAL_PRECISION
} from "./tokens/index.js"

/**
 * @import { AssertExtends, AssertTrue, IsSame, UnwrapSingleton } from "@helios-lang/type-utils"
 */

/**
 * @typedef {object} Pos
 * Position in a source file represented by a line number and a column number.
 *
 * @prop {number} line
 * @prop {number} column
 */

/**
 * @typedef {AssertExtends<Pos, Site>}
 * @typedef {object} Site
 * Source map site containing all necessary information to link a symbol in the output generated by the compiler process back to the original piece of source code.
 *
 * @prop {string} file
 * @prop {number} line
 * @prop {number} column
 * @prop {Pos | undefined} end
 * Optional range end of the Site
 *
 * @prop {string | undefined} description
 * The description is used to attach context information to UPLC symbols to provide more detailed stack traces
 *
 * @prop {() => string} toString
 * Outputs "<file>:<line>:<column>"
 *
 * @prop {(description: string) => Site} withDescription
 * Creates a copy of the Site containing the given description
 */

/**
 * @typedef {"ReferenceError" | "SyntaxError" | "TypeError"} CompilerErrorKind
 */

/**
 * @typedef {AssertExtends<Error, CompilerError>}
 * @typedef {object} CompilerError
 * An error thrown by the compiler process. Can be a reference, syntax or type error.
 *
 * @prop {"CompilerError"} name
 * @prop {CompilerErrorKind} kind
 * @prop {Site} site
 * Source code location of error
 *
 * @prop {string} message
 * Displayed message
 *
 * @prop {string} originalMessage
 * Unformatted message
 *
 * @prop {CompilerError[] | undefined} otherErrors
 * When an {@link ErrorCollector} has more than 1 error and {@link ErrorCollector.throw} is called, the first error is thrown and the remaining are attached to it.
 */

/**
 * @typedef {object} ErrorCollector
 * An `ErrorCollector` accumulates `CompilerError`s so that at the end of the
 * compilation process all errors are logged at once, and all errors can be
 * displayed in the IDE.
 *
 * Use {@link makeErrorCollector} to create a new `ErrorCollector`.
 *
 * @prop {CompilerError[]} errors
 * The list of compiler errors collected
 *
 * @prop {(site: Site, msg: string) => void} syntax
 * Adds a syntax error
 *
 * @prop {(site: Site, msg: string) => void} type
 * Adds a type error
 *
 * @prop {(site: Site, msg: string) => void} reference
 * Adds a reference error
 *
 * @prop {() => void} throw
 * Throws an error if it contains some errors
 */

/**
 * The key is the char index in the new source (which is being mapped to the old source using the Site value)
 * @typedef {Map<number, Site>} SourceMap
 */

/**
 *
 * @typedef {object} Source
 * `Source` wraps a string so that it can be passed by reference.
 *
 * `Source` can also be given additional context information, which is useful during debugging.
 *
 * `Source` is used by textual-Uplc, IR and Helios.
 *
 * Instantiate a `Source` instance with {@link makeSource}.
 *
 * @prop {string} content
 * @prop {string} name provided filename (or script name parsed from script header)
 * @prop {string} [moduleName] optional helios-specific script/module name, parsed from the script header
 * @prop {string} [purpose] optional helios-specific script purpose, parsed from the script header
 * @prop {string} [project] optional project name in which the module is defined
 * @prop {string} [moreInfo] optional additional info about the source
 * @prop {number} length length is a separate field because of performance
 * @prop {number[]} lineEndLocations
 * @prop {(i: number) => string} getChar
 * @prop {(i: number) => string} getWord
 * @prop {(i: number) => [number, number]} getPosition
 * @prop {() => string} pretty
 */

/**
 * @typedef {object} BoolLiteral
 * `BoolLiteral` is a {@link Token} variant that represents the keywords `true` or `false`.
 *
 * Instantiate a `BoolLiteral` token with {@link makeBoolLiteral}.
 *
 * @prop {Site} site
 * @prop {"bool"} kind
 * @prop {boolean} value
 * @prop {(other: Token) => boolean} isEqual
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @typedef {object} ByteArrayLiteral
 * Instantiate a `ByteArrayLiteral` token with {@link makeByteArrayLiteral}.
 *
 * @prop {Site} site
 * @prop {"bytes"} kind
 * @prop {number[]} value
 * @prop {(other: Token) => boolean} isEqual
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @typedef {object} Comment
 * Instantiate a `Comment` token with {@link makeComment}.
 *
 * @prop {Site} site
 * @prop {"comment"} kind
 * @prop {string} value
 * @prop {(other: Token) => boolean} isEqual
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @typedef {"(" | "{" | "["} GroupKind
 */

/**
 * @typedef {")" | "}" | "]"} GroupCloseKind
 */

/**
 * @template {Token[] | TokenReader} F
 * @typedef {object} GenericGroup
 * @prop {Site} site
 * @prop {GroupKind} kind
 * @prop {F[]} fields
 * @prop {SymbolToken[]} separators
 * @prop {string| undefined} error
 * @prop {(kind?: string | undefined, nFields?: number) => boolean} isGroup
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * Can't alias GenericGroup<Token[]> because that gives a circular reference error
 * @typedef {AssertTrue<IsSame<TokenGroup, GenericGroup<Token[]>>>}
 * @typedef {object} TokenGroup
 * @prop {Site} site
 * @prop {GroupKind} kind
 * @prop {Token[][]} fields
 * @prop {SymbolToken[]} separators
 * @prop {string| undefined} error
 * @prop {(kind?: string | undefined, nFields?: number) => boolean} isGroup
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 *
 * @typedef {object} IntLiteral
 * Instantiate a `IntLiteral` token with {@link makeIntLiteral}.
 *
 * @prop {Site} site
 * @prop {"int"} kind
 * @prop {bigint} value
 * @prop {(other: Token) => boolean} isEqual
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @typedef {object} NL
 * `NL` is a {@link Token} variant that represents a newline character.
 *
 * Newline characters are used for Automatic Semicolon Insertion.
 *
 * Instaniate a `NL` token with {@link makeNL}.
 *
 * @prop {Site} site
 * @prop {"newline"} kind
 * @prop {(other: Token) => boolean} isEqual
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @typedef {object} RealLiteral
 * Instantiate a `RealLiteral` token with {@link makeRealLiteral}.
 *
 * @prop {Site} site
 * @prop {"real"} kind
 * @prop {bigint} value
 * @prop {(other: Token) => boolean} isEqual
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @typedef {object} StringLiteral
 * Instantiate a `StringLiteral` with {@link makeStringLiteral}.
 *
 * @prop {Site} site
 * @prop {"string"} kind
 * @prop {string} value
 * @prop {(other: Token) => boolean} isEqual
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @template {string} [T=string]
 * @typedef {object} SymbolToken
 * `SymbolToken` is a {@link Token} variant that represent a non-alphanumeric/non-whitespace sequence of characters.
 *
 * Instantiate a `SymbolToken` with {@link makeSymbolToken}.
 *
 * @prop {Site} site
 * @prop {"symbol"} kind
 * @prop {T} value
 * @prop {(other: Token) => other is SymbolToken<T>} isEqual
 * @prop {(value: string | ReadonlyArray<string>) => boolean} matches
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @typedef {object} Word
 * Instantiate a `Word` token with {@link makeWord}.
 *
 * @prop {Site} site
 * @prop {"word"} kind
 * @prop {string} value
 * @prop {(other: Token) => boolean} isEqual
 * @prop {() => boolean} isInternal
 * @prop {() => boolean} isKeyword
 * @prop {(value: string | ReadonlyArray<string>) => boolean} matches
 * @prop {(preserveWhitespace?: boolean) => string} toString
 */

/**
 * @typedef {(
 *   BoolLiteral
 *   | ByteArrayLiteral
 *   | Comment
 *   | IntLiteral
 *   | NL
 *   | RealLiteral
 *   | StringLiteral
 *   | SymbolToken
 *   | TokenGroup
 *   | Word
 * )} Token
 */

/**
 * @typedef {object} Tokenizer
 * Instantiate a `Tokenizer` with {@link makeTokenizer}.
 *
 * @prop {ErrorCollector} errors
 * @prop {(nestGroups?: boolean) => Token[]} tokenize
 * @prop {() => Generator<Token>} stream
 */

/**
 * The generic type parameter must be used somewhere inside this definition, otherwise typescript fails to infer T inside the TokenReader.matches method
 * The easiest way to do this is return a truthy value from matches() instead of just a boolean
 * @template {Token} [T=Token]
 * @typedef {object} TokenMatcher
 * Token matchers are combined with {@link TokenReader} in order to match sequences of tokens.
 * The following token matchers are available:
 *   - {@link anySymbol}
 *   - {@link anyWord}
 *   - {@link reallit}
 *   - {@link wildcard} (any Token)
 *   - {@link boollit}
 *   - {@link byteslit}
 *   - {@link group}
 *   - {@link intlit}
 *   - {@link oneOf}
 *   - {@link strlit}
 *   - {@link symbol}
 *   - {@link word}
 * @prop {(t: Token) => T | undefined} matches
 * @prop {() => string} toString
 */

/**
 * @template {TokenMatcher[]} Matchers
 * @typedef {{[M in keyof Matchers]: Matchers[M] extends TokenMatcher<infer T> ? (T extends GenericGroup<Token[]> ? GenericGroup<TokenReader> : T) : never}} MapMatchersToTokens
 * Maps a tuple of matchers to a tuple of equivalent token types:
 *   - TokenMatcher<{@link BoolLiteral}> is mapped to {@link BoolLiteral}
 *   - TokenMatcher<{@link ByteArrayLiteral}> is mapped to {@link ByteArrayLiteral}
 *   - TokenMatcher<{@link Comment} is mapped to {@link Comment}
 *   - TokenMatcher<{@link IntLiteral} is mapped to {@link IntLiteral}
 *   - TokenMatcher<{@link RealLiteral} is mapped to {@link RealLiteral}
 *   - TokenMatcher<{@link StringLiteral} is mapped to {@link StringLiteral}
 *   - TokenMatcher<{@link SymbolToken} is mapped to {@link SymbolToken}
 *   - TokenMatcher<{@link TokenGroup}> is augmented and mapped {@link GenericGroup}<{@link TokenReader}>
 *   - TokenMatcher<{@link Word}> is mapped to {@link Word}
 */

/**
 * @typedef {object} TokenReader
 * Instantiate a `TokenReader` with {@link makeTokenReader}.
 *
 * @prop {number} pos
 * Current position of `TokenReader` in `tokens`.
 *
 * @prop {Token[]} tokens
 * Tokens optionally excluding newlines
 *
 * @prop {Token[]} originalTokens
 * Tokens including newlines (can be used for automatic semicolon injection)
 *
 * @prop {Token[]} rest
 * Unread tokens optionally excluding newlines
 *
 * @prop {ErrorCollector} errors
 *
 * @prop {<Matchers extends TokenMatcher[]>(...matchers: [...Matchers]) => TokenReader} assert
 * @prop {() => void} end
 * @prop {<Matchers extends TokenMatcher[]>(...matchers: [...Matchers]) => [TokenReader, ...MapMatchersToTokens<Matchers>] | undefined} findNext
 * @prop {<Matchers extends TokenMatcher[]>(...matchers: [...Matchers]) => [TokenReader, ...MapMatchersToTokens<Matchers>] | undefined} findNextMatch
 * @prop {<Matchers extends TokenMatcher[]>(...matchers: [...Matchers]) => [TokenReader, ...MapMatchersToTokens<Matchers>] | undefined} findLast
 * @prop {<Matchers extends TokenMatcher[]>(...matchers: [...Matchers]) => [TokenReader, ...MapMatchersToTokens<Matchers>] | undefined} findLastMatch
 * @prop {<Matchers extends TokenMatcher[]>(...matchers: [...Matchers]) => TokenReader} readUntil
 * @prop {() => boolean} isEof
 * @prop {<Matchers extends TokenMatcher[]>(...matchers: [...Matchers]) => UnwrapSingleton<MapMatchersToTokens<Matchers>> | undefined} matches
 * @prop {(throwFail?: boolean | string) => TokenReader} endMatch
 * @prop {() => void} unreadToken
 *
 * @prop {(multilineOperators: string[]) => TokenReader} insertSemicolons
 * Creates a new TokenReader with semicolons inserted right before newlines if:
 *   - not first/last in the token list
 *   - not surrounded by multiline operators
 */
